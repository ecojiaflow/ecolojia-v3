// backend/src/routes/ultraProcessing.routes.js
const express = require('express');
const router = express.Router();
const { asyncHandler } = require('../utils/errors');
const { Logger } = require('../utils/logger');

const logger = new Logger('UltraProcessingRoutes');

// üîé Liste simplifi√©e des proc√©d√©s ultra-transformants connus
const suspiciousKeywords = [
  'extrusion',
  'hydrog√©nation',
  'hydrog√©n√©',
  'maltodextrine',
  'ar√¥me artificiel',
  'ar√¥me',
  '√©mulsifiant',
  'emulsifiant',
  'correcteur d\'acidit√©',
  'colorant',
  '√©dulcorant',
  'edulcorant',
  'gomme xanthane',
  'monoglyc√©ride',
  'diglyc√©ride',
  'conservateur',
  'antioxydant',
  'stabilisant',
  '√©paississant',
  'exhausteur de go√ªt',
  'anti-agglom√©rant',
  'agent de texture',
  'sirop de glucose',
  'sirop de fructose',
  'amidon modifi√©',
  'prot√©ine hydrolys√©e',
  'huile hydrog√©n√©e',
  'huile partiellement hydrog√©n√©e',
  'isolat de prot√©ine',
  'cas√©inate',
  'dextrose',
  'fructose',
  'glucose',
  'sirop de ma√Øs',
  'l√©cithine',
  'carragh√©nane',
  'g√©lifiant',
  'acidifiant'
];

// Patterns pour d√©tecter les additifs E-numbers
const eNumberPattern = /\bE\d{3,4}\b/gi;

/**
 * üî¨ Analyse IA ultra-transformation
 */
const detectUltraTransformation = (ingredients) => {
  const found = [];
  const eNumbers = [];
  
  // Convertir en tableau si c'est une string
  const ingredientsList = Array.isArray(ingredients) 
    ? ingredients 
    : ingredients.split(',').map(i => i.trim());

  for (const ingredient of ingredientsList) {
    const lowerIngredient = ingredient.toLowerCase();
    
    // D√©tecter les mots-cl√©s suspects
    for (const keyword of suspiciousKeywords) {
      if (lowerIngredient.includes(keyword) && !found.includes(keyword)) {
        found.push(keyword);
      }
    }
    
    // D√©tecter les E-numbers
    const matches = ingredient.match(eNumberPattern);
    if (matches) {
      eNumbers.push(...matches.filter(e => !eNumbers.includes(e)));
    }
  }

  // Calcul du score et du niveau
  const totalSuspicious = found.length + eNumbers.length;
  let level = 'minimal';
  let score = 0;

  if (totalSuspicious === 0) {
    level = 'minimal';
    score = 0;
  } else if (totalSuspicious === 1) {
    level = 'l√©ger';
    score = 25;
  } else if (totalSuspicious === 2) {
    level = 'mod√©r√©';
    score = 50;
  } else if (totalSuspicious <= 4) {
    level = '√©lev√©';
    score = 75;
  } else {
    level = 's√©v√®re';
    score = 90;
  }

  // Recommandations bas√©es sur le niveau
  const recommendations = {
    minimal: "Excellent ! Ce produit semble peu ou pas transform√©.",
    l√©ger: "Produit l√©g√®rement transform√©, consommation occasionnelle recommand√©e.",
    mod√©r√©: "Produit transform√©, √† consommer avec mod√©ration.",
    √©lev√©: "Produit hautement transform√©, privil√©gier des alternatives plus naturelles.",
    s√©v√®re: "Produit ultra-transform√©, √©viter la consommation r√©guli√®re."
  };

  return {
    level,
    score,
    detected: found,
    eNumbers,
    totalMarkers: totalSuspicious,
    recommendation: recommendations[level],
    justification: `Analyse des ingr√©dients : ${found.length} proc√©d√©(s) suspect(s) et ${eNumbers.length} additif(s) d√©tect√©(s)`
  };
};

// POST /api/ultra-processing/analyze - Analyser l'ultra-transformation
router.post('/analyze', asyncHandler(async (req, res) => {
  const { product, ingredients, name } = req.body;
  
  logger.info('Ultra-processing analysis request', { name: name || product?.title });

  // Validation des donn√©es
  const productName = name || product?.title || product?.name || 'Produit inconnu';
  const ingredientsList = ingredients || product?.ingredients;
  
  if (!ingredientsList) {
    return res.status(400).json({ 
      success: false, 
      error: 'Ingredients list is required',
      message: 'Veuillez fournir la liste des ingr√©dients'
    });
  }

  // Analyse
  const result = detectUltraTransformation(ingredientsList);
  
  logger.info('Ultra-processing analysis completed', { 
    productName,
    level: result.level,
    score: result.score 
  });

  return res.json({
    success: true,
    product: productName,
    ultraProcessing: result,
    sources: [
      'Monteiro et al. NOVA Classification 2019',
      'EFSA Guidelines on Food Additives 2021',
      'INSERM - Ultra-processed Foods Study 2024',
      'ANSES - Food Processing Report 2022'
    ],
    metadata: {
      analyzedAt: new Date(),
      version: '1.0'
    }
  });
}));

// GET /api/ultra-processing/check/:barcode - V√©rifier par code-barres
router.get('/check/:barcode', asyncHandler(async (req, res) => {
  const { barcode } = req.params;
  
  logger.info('Ultra-processing check by barcode', { barcode });
  
  // TODO: Int√©grer avec la base de donn√©es des produits
  // Pour l'instant, retourner une r√©ponse mock
  
  res.json({
    success: true,
    barcode,
    message: 'Feature coming soon - barcode lookup for ultra-processing analysis'
  });
}));

// GET /api/ultra-processing/additives - Liste des additifs suspects
router.get('/additives', (req, res) => {
  const dangerousAdditives = {
    colorants: {
      'E102': 'Tartrazine - Colorant jaune, peut causer hyperactivit√©',
      'E110': 'Sunset Yellow - Colorant orange, allerg√®ne potentiel',
      'E122': 'Azorubine - Colorant rouge, interdit dans certains pays',
      'E124': 'Ponceau 4R - Colorant rouge, peut causer hyperactivit√©',
      'E129': 'Allura Red - Colorant rouge, allerg√®ne potentiel'
    },
    conservateurs: {
      'E211': 'Benzoate de sodium - Conservateur, peut former du benz√®ne',
      'E220': 'Dioxyde de soufre - Conservateur, allerg√®ne majeur',
      'E250': 'Nitrite de sodium - Conservateur, potentiellement canc√©rig√®ne',
      'E320': 'BHA - Antioxydant, perturbateur endocrinien suspect√©',
      'E321': 'BHT - Antioxydant, perturbateur endocrinien suspect√©'
    },
    √©dulcorants: {
      'E951': 'Aspartame - √âdulcorant artificiel controvers√©',
      'E952': 'Cyclamate - √âdulcorant interdit aux USA',
      'E954': 'Saccharine - √âdulcorant artificiel',
      'E955': 'Sucralose - √âdulcorant artificiel'
    },
    autres: {
      'E621': 'Glutamate monosodique - Exhausteur de go√ªt',
      'E150d': 'Caramel au sulfite d\'ammonium - Colorant',
      'E471': 'Mono- et diglyc√©rides - √âmulsifiant'
    }
  };
  
  res.json({
    success: true,
    additives: dangerousAdditives,
    totalCount: Object.values(dangerousAdditives).reduce((acc, cat) => acc + Object.keys(cat).length, 0),
    keywords: suspiciousKeywords
  });
});

// GET /api/ultra-processing/stats - Statistiques globales
router.get('/stats', asyncHandler(async (req, res) => {
  // TODO: Impl√©menter les vraies statistiques depuis la DB
  
  const mockStats = {
    totalAnalyzed: 15234,
    distribution: {
      minimal: 12,
      l√©ger: 18,
      mod√©r√©: 35,
      √©lev√©: 25,
      s√©v√®re: 10
    },
    topAdditives: [
      { code: 'E330', name: 'Acide citrique', count: 3421 },
      { code: 'E322', name: 'L√©cithines', count: 2987 },
      { code: 'E471', name: 'Mono- et diglyc√©rides', count: 2341 }
    ],
    averageScore: 52.3
  };
  
  res.json({
    success: true,
    stats: mockStats,
    lastUpdated: new Date()
  });
}));

module.exports = router;