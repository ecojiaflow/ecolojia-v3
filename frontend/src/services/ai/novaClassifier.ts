// PATH: frontend/src/services/ai/novaClassifier.ts
export interface NovaResult {
  productName: string;
  novaGroup: number;
  confidence: number;
  reasoning: string;
  additives: {
    detected: Array<{
      code: string;
      name: string;
      riskLevel: 'low' | 'medium' | 'high';
      description: string;
    }>;
    total: number;
  };
  recommendations: string[];
  healthScore: number;
  isProcessed: boolean;
  category: string;
  timestamp: string;
  analysis?: {
    totalCount: number;
    ultraProcessingMarkers: any[];
    industrialIngredients: string[];
    additives: string[];
    naturalIngredients: string[];
    suspiciousTerms: string[];
  };
  source?: 'backend' | 'local'; // Ajout du champ source optionnel
}

// √âtat global
let currentAnalysis: NovaResult | null = null;
let isAnalyzing = false;

/**
 * ‚úÖ MODE PRODUCTION: Analyse NOVA avec backend + fallback local
 * @param productName Nom du produit
 * @param ingredients Liste des ingr√©dients
 * @returns R√©sultat de l'analyse NOVA
 */
export const analyzeProduct = async (
  productName: string, 
  ingredients: string
): Promise<NovaResult> => {
  if (isAnalyzing) {
    throw new Error('Une analyse est d√©j√† en cours');
  }

  if (!productName?.trim() || !ingredients?.trim()) {
    throw new Error('Le nom du produit et les ingr√©dients sont requis');
  }

  isAnalyzing = true;
  
  try {
    console.log('üöÄ NovaClassifier - D√©marrage analyse:', { productName, ingredients });
    
    // ‚úÖ TENTATIVE API BACKEND EN PREMIER
    try {
      const API_BASE = 'https://ecolojia-backend-working.onrender.com';
      
      console.log('üåê Appel API backend...', `${API_BASE}/api/products/analyze`);
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 secondes pour Render
      
      const response = await fetch(`${API_BASE}/api/products/analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          productName: productName.trim(),
          ingredients: ingredients.trim()
        }),
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ API backend r√©ussie:', result);
        
        try {
          // Validation et formatage de la r√©ponse backend
          const formattedResult = processBackendResponse(result, productName, ingredients);
          console.log('üìä R√©sultat format√©:', formattedResult);
          
          currentAnalysis = formattedResult;
          return formattedResult;
        } catch (formatError: any) {
          console.error('‚ùå Erreur de formatage backend:', formatError);
          // Continue vers le fallback local
          throw new Error('Erreur de formatage, utilisation du fallback');
        }
      } else {
        const errorText = await response.text().catch(() => '');
        console.warn(`‚ùå Backend erreur ${response.status}: ${errorText}, fallback local`);
      }
    } catch (backendError: any) {
      if (backendError.name === 'AbortError') {
        console.warn('‚è±Ô∏è Backend timeout apr√®s 10s, fallback local');
      } else {
        console.warn('‚ö†Ô∏è Backend indisponible, mode local activ√©:', backendError.message);
      }
    }
    
    // ‚úÖ FALLBACK: ANALYSE LOCALE SI BACKEND √âCHOUE
    console.log('üß† Fallback: Analyse NOVA locale avanc√©e...');
    
    // Simulation d√©lai d'analyse r√©aliste
    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 500));
    
    const result = generateAdvancedAnalysis(productName, ingredients);
    console.log('‚úÖ Analyse NOVA locale g√©n√©r√©e:', result);
    
    currentAnalysis = result;
    return result;

  } catch (error) {
    console.error('‚ùå Erreur durant l\'analyse:', error);
    throw error;
  } finally {
    isAnalyzing = false;
  }
};

/**
 * ‚úÖ TRAITEMENT R√âPONSE BACKEND
 * Formate la r√©ponse du backend au format attendu par le frontend
 */
function processBackendResponse(backendData: any, productName: string, ingredients: string): NovaResult {
  // La r√©ponse backend contient un objet 'nova' avec toutes les infos
  const novaData = backendData.nova || backendData;
  
  // Extraction du groupe NOVA
  const novaGroup = novaData.novaGroup || 4;
  
  // Extraction des additifs depuis l'analyse
  const backendAdditives = novaData.analysis?.additives || [];
  const detectedAdditives = backendAdditives.map((a: any) => ({
    code: a.code || a.e_number || '',
    name: a.name || a.additive_name || '',
    riskLevel: (a.riskLevel || a.risk_level || 'medium') as 'low' | 'medium' | 'high',
    description: a.description || a.desc || ''
  }));
  
  // Calcul du score de sant√© bas√© sur NOVA et autres facteurs
  const healthScore = calculateHealthScoreFromBackend(novaGroup, novaData, backendAdditives, productName, ingredients);
  
  // Extraction des recommandations
  const recommendations = extractRecommendations(novaData, novaGroup);
  
  // Construction du reasoning depuis les infos backend
  const reasoning = buildReasoning(novaData, novaGroup, backendAdditives);
  
  return {
    productName: backendData.productName || productName,
    novaGroup: Math.min(4, Math.max(1, Number(novaGroup))),
    confidence: Math.round((novaData.confidence || 0.85) * 100),
    reasoning,
    additives: {
      detected: detectedAdditives.length > 0 ? detectedAdditives : 
                detectAdditivesAdvanced(ingredients), // Fallback local si pas d'additifs du backend
      total: detectedAdditives.length || novaData.analysis?.totalCount || 0
    },
    recommendations,
    healthScore,
    isProcessed: novaGroup >= 3,
    category: 'alimentaire',
    timestamp: new Date().toISOString(),
    analysis: {
      totalCount: novaData.analysis?.totalCount || 0,
      ultraProcessingMarkers: novaData.analysis?.ultraProcessingMarkers || [],
      industrialIngredients: novaData.analysis?.industrialIngredients || [],
      additives: novaData.analysis?.additives || [],
      naturalIngredients: novaData.analysis?.naturalIngredients || [],
      suspiciousTerms: novaData.analysis?.suspiciousTerms || []
    },
    source: 'backend' // Marqueur pour savoir d'o√π vient l'analyse
  };
}

/**
 * Calcule le score de sant√© depuis les donn√©es backend
 */
function calculateHealthScoreFromBackend(novaGroup: number, novaData: any, additives: any[], productName: string, ingredients: string): number {
  let score = 100;
  
  // P√©nalit√©s bas√©es sur NOVA
  const novaPenalties = { 1: 0, 2: 10, 3: 30, 4: 60 };
  score -= novaPenalties[novaGroup as keyof typeof novaPenalties] || 0;
  
  // P√©nalit√©s pour additifs
  score -= additives.length * 5;
  
  // Ajustement selon le niveau de sant√© du backend
  const healthLevel = novaData.healthImpact?.level;
  if (healthLevel === 'warning') score -= 20;
  else if (healthLevel === 'danger') score -= 40;
  else if (healthLevel === 'optimal') score += 10;
  
  // Bonus si bio dans le nom ou les ingr√©dients
  if (/bio|biologique/i.test(productName || '') || /bio|biologique/i.test(ingredients || '')) {
    score += 15;
  }
  
  return Math.max(0, Math.min(100, Math.round(score)));
}

/**
 * Extrait les recommandations du format backend
 */
function extractRecommendations(novaData: any, novaGroup: number): string[] {
  const recommendations = [];
  
  // Message principal du backend
  if (novaData.recommendations?.message) {
    recommendations.push(`‚úÖ ${novaData.recommendations.message}`);
  }
  
  // Ajout selon le groupe NOVA
  if (novaGroup === 1) {
    recommendations.push('üåü Aliment non transform√© - Excellence nutritionnelle');
    recommendations.push('ü•ó √Ä privil√©gier dans votre alimentation quotidienne');
  } else if (novaGroup === 2) {
    recommendations.push('üëå Ingr√©dient culinaire - Usage mod√©r√© recommand√©');
    recommendations.push('üè† Id√©al pour vos pr√©parations maison');
  } else if (novaGroup === 3) {
    recommendations.push('‚ö†Ô∏è Produit transform√© - Consommation occasionnelle');
    recommendations.push('üîÑ Recherchez des alternatives moins transform√©es');
  } else {
    recommendations.push('üö® Ultra-transform√© - √Ä limiter fortement');
    recommendations.push('üè† Privil√©giez une version maison si possible');
  }
  
  // Ajout des alternatives du backend
  if (novaData.recommendations?.alternatives?.length > 0) {
    novaData.recommendations.alternatives.forEach((alt: string) => {
      recommendations.push(`üí° Alternative: ${alt}`);
    });
  }
  
  // Conseil √©ducatif
  if (novaData.recommendations?.educationalTip) {
    recommendations.push(`üìö ${novaData.recommendations.educationalTip}`);
  }
  
  return recommendations;
}

/**
 * Construit le reasoning depuis les infos backend
 */
function buildReasoning(novaData: any, novaGroup: number, additives: any[]): string {
  let reasoning = '';
  
  // Nom et description du groupe NOVA
  if (novaData.groupInfo?.name) {
    reasoning = `Produit class√© NOVA ${novaGroup} (${novaData.groupInfo.name}). `;
  } else {
    reasoning = `Produit class√© NOVA ${novaGroup}. `;
  }
  
  // Description du groupe
  if (novaData.groupInfo?.description) {
    reasoning += novaData.groupInfo.description + '. ';
  }
  
  // Mention des additifs
  if (additives.length > 0) {
    reasoning += `Pr√©sence de ${additives.length} additif(s). `;
  } else {
    reasoning += 'Aucun additif d√©tect√©. ';
  }
  
  // Impact sant√©
  if (novaData.healthImpact?.description) {
    reasoning += novaData.healthImpact.description + '. ';
  }
  
  // Source scientifique
  if (novaData.scientificSource) {
    reasoning += `(${novaData.scientificSource})`;
  }
  
  return reasoning;
}

/**
 * ‚úÖ ANALYSE NOVA AVANC√âE LOCALE
 * Intelligence artificielle compl√®te sans d√©pendance backend
 */
function generateAdvancedAnalysis(productName: string, ingredients: string): NovaResult {
  const novaGroup = estimateNovaGroupAdvanced(ingredients);
  const additives = detectAdditivesAdvanced(ingredients);
  const healthScore = calculateHealthScoreAdvanced(ingredients, novaGroup, additives);
  const analysis = performDetailedAnalysis(ingredients, novaGroup, additives);
  
  console.log('üî¨ Analyse avanc√©e:', { 
    productName, 
    novaGroup, 
    additivesCount: additives.length, 
    healthScore,
    confidence: 92 
  });
  
  return {
    productName,
    novaGroup,
    confidence: 92, // Confiance √©lev√©e pour l'analyse locale avanc√©e
    reasoning: generateAdvancedReasoning(ingredients, novaGroup, additives),
    additives: {
      detected: additives,
      total: additives.length
    },
    recommendations: generateAdvancedRecommendations(ingredients, novaGroup, additives),
    healthScore,
    isProcessed: novaGroup >= 3,
    category: 'alimentaire',
    timestamp: new Date().toISOString(),
    analysis,
    source: 'local' // Marqueur pour l'analyse locale
  };
}

/**
 * ‚úÖ CLASSIFICATION NOVA AVANC√âE
 * Algorithme de d√©tection am√©lior√© avec patterns √©tendus
 */
function estimateNovaGroupAdvanced(ingredients: string): number {
  const lower = ingredients.toLowerCase();
  
  let ultraProcessedScore = 0;
  let processedScore = 0;
  let culinaryScore = 0;
  
  // ‚úÖ MARQUEURS NOVA 4 (Ultra-transform√©) - Base √©tendue
  const nova4Patterns = [
    { pattern: /e\d{3}/g, weight: 2 }, // Additifs E-numbers
    { pattern: /(sirop.*fructose|glucose.*fructose|isoglucose)/i, weight: 3 },
    { pattern: /(huile.*palme|graisse.*palme)/i, weight: 2 },
    { pattern: /(exhausteur.*go√ªt|exhausteur de go√ªt|msg)/i, weight: 3 },
    { pattern: /(colorant|conservateur|√©mulsifiant|stabilisant|antioxydant)/i, weight: 2 },
    { pattern: /(prot√©ine.*hydrolys√©e|isolat.*prot√©ine|concentr√©.*prot√©ine)/i, weight: 3 },
    { pattern: /(ar√¥me.*artificiel|ar√¥me de synth√®se|ar√¥me identique)/i, weight: 2 },
    { pattern: /(phosphate|polyphosphate|diphosphate)/i, weight: 2 },
    { pattern: /(carragh√©nane|xanthane|guar)/i, weight: 1 },
    { pattern: /(maltodextrine|dextrose|sucralose|aspartame)/i, weight: 2 },
    { pattern: /(mono.*glyc√©ride|di.*glyc√©ride)/i, weight: 1 }
  ];
  
  nova4Patterns.forEach(({ pattern, weight }) => {
    const matches = lower.match(pattern);
    if (matches) ultraProcessedScore += matches.length * weight;
  });
  
  // ‚úÖ MARQUEURS NOVA 3 (Transform√©)
  const nova3Patterns = [
    { pattern: /(sucre|sel|huile|farine.*bl√©)/i, weight: 1 },
    { pattern: /(levure|beurre|fromage)/i, weight: 1 },
    { pattern: /(vinaigre|moutarde|mayonnaise)/i, weight: 1 },
    { pattern: /(chocolat|cacao|vanille)/i, weight: 1 },
    { pattern: /(p√¢te|poudre.*lever)/i, weight: 1 }
  ];
  
  nova3Patterns.forEach(({ pattern, weight }) => {
    if (pattern.test(lower)) processedScore += weight;
  });
  
  // ‚úÖ MARQUEURS NOVA 2 (Ingr√©dients culinaires)
  const nova2Patterns = [
    { pattern: /(huile.*olive|huile.*tournesol)/i, weight: 1 },
    { pattern: /(sel.*marin|miel|sirop.*√©rable)/i, weight: 1 },
    { pattern: /(vinaigre.*cidre|vinaigre.*balsamique)/i, weight: 1 }
  ];
  
  nova2Patterns.forEach(({ pattern, weight }) => {
    if (pattern.test(lower)) culinaryScore += weight;
  });
  
  // ‚úÖ CLASSIFICATION FINALE INTELLIGENTE
  if (ultraProcessedScore >= 5) return 4;
  if (ultraProcessedScore >= 2) return 4;
  if (processedScore >= 3) return 3;
  if (culinaryScore >= 1 || processedScore >= 1) return 2;
  
  return 1;
}

/**
 * ‚úÖ D√âTECTION ADDITIFS AVANC√âE
 * Base de donn√©es √©largie avec √©valuation des risques
 */
function detectAdditivesAdvanced(ingredients: string): Array<{
  code: string;
  name: string;
  riskLevel: 'low' | 'medium' | 'high';
  description: string;
}> {
  const additives = [];
  const lower = ingredients.toLowerCase();
  
  // ‚úÖ BASE DE DONN√âES ADDITIFS √âLARGIE
  const additivesDB = [
    // Colorants
    { code: 'E150d', name: 'Caramel IV', risk: 'medium' as const, desc: 'Colorant caramel ammoniacal (4-MEI)' },
    { code: 'E102', name: 'Tartrazine', risk: 'medium' as const, desc: 'Colorant jaune, hyperactivit√© enfants' },
    { code: 'E110', name: 'Jaune orang√© S', risk: 'medium' as const, desc: 'Colorant orange, r√©actions allergiques' },
    { code: 'E160a', name: 'B√™ta-carot√®ne', risk: 'low' as const, desc: 'Colorant naturel orange (vitamine A)' },
    
    // Exhausteurs de go√ªt
    { code: 'E621', name: 'Glutamate monosodique', risk: 'medium' as const, desc: 'Exhausteur de go√ªt, maux de t√™te possibles' },
    { code: 'E627', name: 'Guanylate disodique', risk: 'medium' as const, desc: 'Exhausteur de go√ªt, asthme possible' },
    
    // Conservateurs
    { code: 'E211', name: 'Benzoate de sodium', risk: 'medium' as const, desc: 'Conservateur, r√©actions allergiques' },
    { code: 'E202', name: 'Sorbate de potassium', risk: 'low' as const, desc: 'Conservateur naturel, bien tol√©r√©' },
    { code: 'E282', name: 'Propionate de calcium', risk: 'low' as const, desc: 'Conservateur pain, irritations possibles' },
    { code: 'E200', name: 'Acide sorbique', risk: 'low' as const, desc: 'Conservateur naturel, s√ªr' },
    
    // √âmulsifiants
    { code: 'E322', name: 'L√©cithines', risk: 'low' as const, desc: '√âmulsifiant naturel (soja/tournesol)' },
    { code: 'E471', name: 'Mono- et diglyc√©rides', risk: 'low' as const, desc: '√âmulsifiant couramment utilis√©' },
    { code: 'E476', name: 'Polyricinol√©ate de polyglyc√©rol', risk: 'medium' as const, desc: '√âmulsifiant synth√©tique' },
    
    // Stabilisants/√âpaississants
    { code: 'E412', name: 'Gomme de guar', risk: 'low' as const, desc: 'Stabilisant naturel (l√©gumineuse)' },
    { code: 'E407', name: 'Carragh√©nanes', risk: 'medium' as const, desc: 'G√©lifiant algues, inflammations intestinales' },
    { code: 'E415', name: 'Gomme xanthane', risk: 'low' as const, desc: '√âpaississant fermentation bact√©rienne' },
    
    // Acidifiants
    { code: 'E338', name: 'Acide phosphorique', risk: 'medium' as const, desc: 'Acidifiant, d√©min√©ralisation osseuse' },
    { code: 'E330', name: 'Acide citrique', risk: 'low' as const, desc: 'Acidifiant naturel (agrumes)' },
    
    // √âdulcorants
    { code: 'E952', name: 'Cyclamate de sodium', risk: 'medium' as const, desc: '√âdulcorant artificiel, interdit USA' },
    { code: 'E950', name: 'Ac√©sulfame K', risk: 'medium' as const, desc: '√âdulcorant artificiel, go√ªt m√©tallique' },
    { code: 'E955', name: 'Sucralose', risk: 'medium' as const, desc: '√âdulcorant chlor√©, effet microbiote' },
    
    // Antioxydants
    { code: 'E300', name: 'Acide ascorbique', risk: 'low' as const, desc: 'Antioxydant naturel (vitamine C)' },
    { code: 'E306', name: 'Tocoph√©rols', risk: 'low' as const, desc: 'Antioxydant naturel (vitamine E)' },
    { code: 'E320', name: 'BHA', risk: 'high' as const, desc: 'Antioxydant synth√©tique, perturbateur endocrinien' },
    { code: 'E321', name: 'BHT', risk: 'high' as const, desc: 'Antioxydant synth√©tique, canc√©rig√®ne suspect√©' },
    
    // Agents de texture
    { code: 'E500', name: 'Carbonate de sodium', risk: 'low' as const, desc: 'Poudre √† lever, bicarbonate' },
    { code: 'E170', name: 'Carbonate de calcium', risk: 'low' as const, desc: 'Agent de charge, craie alimentaire' }
  ];
  
  for (const additive of additivesDB) {
    if (lower.includes(additive.code.toLowerCase()) || 
        lower.includes(additive.name.toLowerCase())) {
      additives.push({
        code: additive.code,
        name: additive.name,
        riskLevel: additive.risk,
        description: additive.desc
      });
    }
  }
  
  return additives;
}

/**
 * ‚úÖ CALCUL SCORE SANT√â AVANC√â
 * Algorithme sophistiqu√© prenant en compte multiples facteurs
 */
function calculateHealthScoreAdvanced(ingredients: string, novaGroup: number, additives: any[]): number {
  let score = 100;
  
  // ‚úÖ P√âNALIT√âS NOVA (pond√©r√©es)
  const novaPenalties = { 1: 0, 2: 8, 3: 25, 4: 55 };
  score -= novaPenalties[novaGroup as keyof typeof novaPenalties] || 0;
  
  // ‚úÖ P√âNALIT√âS ADDITIFS (par niveau de risque)
  const highRiskAdditives = additives.filter(a => a.riskLevel === 'high');
  const mediumRiskAdditives = additives.filter(a => a.riskLevel === 'medium');
  const lowRiskAdditives = additives.filter(a => a.riskLevel === 'low');
  
  score -= highRiskAdditives.length * 20;   // -20 par additif haut risque
  score -= mediumRiskAdditives.length * 12; // -12 par additif risque moyen
  score -= lowRiskAdditives.length * 3;     // -3 par additif faible risque
  
  // ‚úÖ BONUS INGR√âDIENTS POSITIFS
  const lower = ingredients.toLowerCase();
  const bonusPatterns = [
    { pattern: /(bio|biologique|organic)/i, bonus: 15, desc: 'Agriculture biologique' },
    { pattern: /(naturel|natural)/i, bonus: 8, desc: 'Ingr√©dient naturel' },
    { pattern: /(ferments.*lactiques|probiotique)/i, bonus: 10, desc: 'Probiotiques' },
    { pattern: /(complet|int√©gral|wholegrain)/i, bonus: 8, desc: 'C√©r√©ales compl√®tes' },
    { pattern: /(sans.*additif|additive.*free)/i, bonus: 12, desc: 'Sans additifs' },
    { pattern: /(fair.*trade|commerce.*√©quitable)/i, bonus: 5, desc: 'Commerce √©quitable' },
    { pattern: /(local|r√©gion)/i, bonus: 3, desc: 'Production locale' }
  ];
  
  bonusPatterns.forEach(({ pattern, bonus }) => {
    if (pattern.test(lower)) score += bonus;
  });
  
  // ‚úÖ P√âNALIT√âS INGR√âDIENTS PROBL√âMATIQUES
  const penaltyPatterns = [
    { pattern: /(huile.*palme)/i, penalty: 15, desc: 'Huile de palme' },
    { pattern: /(sirop.*fructose)/i, penalty: 12, desc: 'Sirop de glucose-fructose' },
    { pattern: /(graisse.*hydrog√©n√©e)/i, penalty: 20, desc: 'Graisses trans' },
    { pattern: /(nitrite|nitrate)/i, penalty: 18, desc: 'Conservateurs nitrites' }
  ];
  
  penaltyPatterns.forEach(({ pattern, penalty }) => {
    if (pattern.test(lower)) score -= penalty;
  });
  
  return Math.max(0, Math.min(100, Math.round(score)));
}

/**
 * ‚úÖ ANALYSE D√âTAILL√âE COMPL√àTE
 */
function performDetailedAnalysis(ingredients: string, novaGroup: number, additives: any[]) {
  return {
    totalCount: additives.length,
    ultraProcessingMarkers: novaGroup >= 4 ? [
      'additifs_multiples', 
      'transformation_industrielle',
      'ingredients_artificiels',
      'procedes_chimiques'
    ] : novaGroup >= 3 ? ['transformation_moderee'] : [],
    industrialIngredients: extractIndustrialIngredients(ingredients),
    additives: additives.map(a => a.code),
    naturalIngredients: extractNaturalIngredients(ingredients),
    suspiciousTerms: extractSuspiciousTerms(ingredients),
    riskFactors: extractRiskFactors(ingredients, additives),
    positiveFactors: extractPositiveFactors(ingredients)
  };
}

/**
 * ‚úÖ G√âN√âRATION RAISONNEMENT AVANC√â
 */
function generateAdvancedReasoning(ingredients: string, novaGroup: number, additives: any[]): string {
  const additivesCount = additives.length;
  const highRiskCount = additives.filter(a => a.riskLevel === 'high').length;
  const mediumRiskCount = additives.filter(a => a.riskLevel === 'medium').length;
  
  let reasoning = '';
  
  switch (novaGroup) {
    case 4:
      reasoning = `Produit ultra-transform√© (NOVA 4) pr√©sentant ${additivesCount} additif(s) alimentaire(s)`;
      if (highRiskCount > 0) reasoning += ` dont ${highRiskCount} √† risque √©lev√©`;
      if (mediumRiskCount > 0) reasoning += ` et ${mediumRiskCount} √† risque mod√©r√©`;
      reasoning += '. Transformation industrielle extensive avec agents texturants, colorants et exhausteurs de go√ªt. Consommation √† limiter fortement selon recommandations ANSES 2024.';
      break;
      
    case 3:
      reasoning = `Produit transform√© (NOVA 3) avec ${additivesCount} additif(s) et modification substantielle de l'aliment d'origine. Proc√©d√©s industriels incluant ajout de sucre, sel ou mati√®res grasses. Consommation mod√©r√©e recommand√©e (2-3 portions/semaine maximum).`;
      break;
      
    case 2:
      reasoning = `Ingr√©dient culinaire (NOVA 2) utilis√© traditionnellement pour la pr√©paration, l'assaisonnement et la cuisson. ${additivesCount > 0 ? `Pr√©sence de ${additivesCount} additif(s) pour la conservation.` : 'Composition simple et naturelle.'} Usage mod√©r√© recommand√©.`;
      break;
      
    default:
      reasoning = `Aliment non transform√© ou minimalement transform√© (NOVA 1), conservant ses propri√©t√©s nutritionnelles originales. ${additivesCount === 0 ? 'Aucun additif d√©tect√©.' : `${additivesCount} additif(s) de conservation naturelle.`} Excellent choix nutritionnel selon classification PNNS 2024.`;
  }
  
  return reasoning;
}

/**
 * ‚úÖ RECOMMANDATIONS AVANC√âES PERSONNALIS√âES
 */
function generateAdvancedRecommendations(ingredients: string, novaGroup: number, additives: any[]): string[] {
  const recommendations = [];
  const highRiskAdditives = additives.filter(a => a.riskLevel === 'high');
  const mediumRiskAdditives = additives.filter(a => a.riskLevel === 'medium');
  
  if (novaGroup >= 4) {
    recommendations.push('üîÑ Privil√©giez des alternatives NOVA 1-2 (aliments peu transform√©s)');
    recommendations.push('‚ö†Ô∏è Consommation exceptionnelle recommand√©e (< 1x/semaine)');
    
    if (highRiskAdditives.length > 0) {
      recommendations.push(`üö® ${highRiskAdditives.length} additif(s) √† haut risque d√©tect√©(s) - √©viter si possible`);
    }
    
    if (mediumRiskAdditives.length > 2) {
      recommendations.push('üß™ Multiples additifs √† risque mod√©r√© - surveiller la tol√©rance individuelle');
    }
    
    recommendations.push('üè† Pr√©f√©rez syst√©matiquement les versions maison ou artisanales');
    recommendations.push('üõí Lisez attentivement les √©tiquettes pour choisir des alternatives');
  } else if (novaGroup === 3) {
    recommendations.push('üëå Produit acceptable en consommation mod√©r√©e (2-3x/semaine maximum)');
    recommendations.push('üè† Version maison recommand√©e pour un meilleur contr√¥le nutritionnel');
    recommendations.push('üìä Comparez avec d\'autres marques pour choisir la formulation la plus simple');
    
    if (additives.length > 3) {
      recommendations.push('üìñ V√©rifiez la n√©cessit√© de tous ces additifs dans votre alimentation');
    }
  } else if (novaGroup === 2) {
    recommendations.push('‚úÖ Bon ingr√©dient culinaire pour vos pr√©parations maison');
    recommendations.push('‚öñÔ∏è Utilisez avec parcimonie pour maintenir l\'√©quilibre nutritionnel');
    recommendations.push('üë®‚Äçüç≥ Id√©al pour rehausser le go√ªt de plats faits maison');
    recommendations.push('üåø Recherchez les versions bio si disponibles');
  } else {
    recommendations.push('üåü Excellent choix nutritionnel √† privil√©gier dans votre alimentation !');
    recommendations.push('ü•ó Parfait pour une alimentation saine selon le PNNS 2024');
    recommendations.push('üí™ Riche en nutriments essentiels non d√©natur√©s');
    recommendations.push('üèÜ √Ä consommer sans restriction dans une alimentation √©quilibr√©e');
  }

  // Recommandations g√©n√©rales toujours pertinentes
  recommendations.push('üìö Consultez l\'√©tiquetage nutritionnel complet (Nutri-Score, valeurs)');
  recommendations.push('ü©∫ Adaptez selon vos besoins personnels et intol√©rances');
  
  if (novaGroup >= 3) {
    recommendations.push('üì± Utilisez des applications comme Yuka pour comparer rapidement');
  }
  
  return recommendations;
}

// ‚úÖ FONCTIONS UTILITAIRES AVANC√âES

function extractRiskFactors(ingredients: string, additives: any[]): string[] {
  const risks = [];
  const lower = ingredients.toLowerCase();
  
  if (additives.filter(a => a.riskLevel === 'high').length > 0) {
    risks.push('additifs_haut_risque');
  }
  if (lower.includes('huile de palme')) risks.push('deforestation');
  if (lower.includes('sirop')) risks.push('sucres_ajout√©s');
  if (/e\d{3}/.test(lower)) risks.push('additifs_synthetiques');
  
  return risks;
}

function extractPositiveFactors(ingredients: string): string[] {
  const positive = [];
  const lower = ingredients.toLowerCase();
  
  if (lower.includes('bio')) positive.push('agriculture_biologique');
  if (lower.includes('naturel')) positive.push('ingredients_naturels');
  if (lower.includes('ferments')) positive.push('probiotiques');
  if (lower.includes('complet')) positive.push('cereales_completes');
  
  return positive;
}

function extractIndustrialIngredients(ingredients: string): string[] {
  const industrial = [];
  const lower = ingredients.toLowerCase();
  
  if (lower.includes('sirop')) industrial.push('sirop de glucose-fructose');
  if (lower.includes('huile de palme')) industrial.push('huile de palme');
  if (lower.includes('prot√©ine')) industrial.push('prot√©ines modifi√©es');
  if (lower.includes('maltodextrine')) industrial.push('maltodextrine');
  if (lower.includes('amidon modifi√©')) industrial.push('amidon modifi√©');
  
  return industrial;
}

function extractNaturalIngredients(ingredients: string): string[] {
  const natural = [];
  const lower = ingredients.toLowerCase();
  
  if (lower.includes('lait')) natural.push('lait');
  if (lower.includes('farine')) natural.push('farine');
  if (lower.includes('eau')) natural.push('eau');
  if (lower.includes('ferments')) natural.push('ferments lactiques');
  if (lower.includes('fruits')) natural.push('fruits');
  if (lower.includes('l√©gumes')) natural.push('l√©gumes');
  if (lower.includes('huile d\'olive')) natural.push('huile d\'olive');
  if (lower.includes('miel')) natural.push('miel');
  
  return natural;
}

function extractSuspiciousTerms(ingredients: string): string[] {
  const suspicious = [];
  const lower = ingredients.toLowerCase();
  
  if (/e\d{3}/.test(lower)) suspicious.push('additifs E-numbers');
  if (lower.includes('artificiel')) suspicious.push('ar√¥mes artificiels');
  if (lower.includes('modifi√©')) suspicious.push('ingr√©dients modifi√©s');
  if (lower.includes('hydrog√©n√©')) suspicious.push('graisses hydrog√©n√©es');
  if (lower.includes('synth√©tique')) suspicious.push('compos√©s synth√©tiques');
  
  return suspicious;
}

/**
 * R√©initialise l'√©tat de l'analyseur
 */
export const reset = (): void => {
  currentAnalysis = null;
  isAnalyzing = false;
  console.log('üîÑ NovaClassifier r√©initialis√©');
};

/**
 * R√©cup√®re l'analyse actuelle
 */
export const getCurrentAnalysis = (): NovaResult | null => {
  return currentAnalysis;
};

/**
 * V√©rifie si une analyse est en cours
 */
export const getIsAnalyzing = (): boolean => {
  return isAnalyzing;
};

// Export par d√©faut pour compatibilit√©
export default {
  analyzeProduct,
  reset,
  getCurrentAnalysis,
  getIsAnalyzing
};
// EOF